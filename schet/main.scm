;;         schet
;; - scheme text editor -

(define f-r '())
(define f-w '())
(define bracket-mode #f)
(define depth 0)
(define user-input '())
(define count 0)
(define register '())
(define (push x) (set! register (append (list x) register)))
(define (safe-read) (let ((str (read))) (if (symbol? str) (if (file-exists? (symbol->string str)) (symbol->string str) ".tmp") ".tmp")))
(define (repl) (if (not (eq? 'exit user-input))
		 (begin (display "f-w:")
		 	(display f-w)
			(newline)
		 	(display "f-r:")
		 	(display f-r)
		 	(newline)
		 	(display "schet>")
			(set! user-input (read))
			(command user-input)
			(repl))))
(define (command op)
  (cond
   ((eq? op 'bracket) (set! bracket-mode #t))
   ((eq? op 'help) (display "help"))
   ((eq? op 'new) (display "new>") (let ((str (read))) (if (symbol? str) (close-output-port (open-output-file (symbol->string str))) (display "Error"))))
   ((eq? op 'eval) (display "eval>") (display (eval (read) (interaction-environment))) (display "\n"))
   ((eq? op 'ready-edit) (command 'open-input-file) (command 'buffer-copy) (set! f-w (open-output-string)))
   ((eq? op 'write-buffer) (set! register (reverse (string->list (get-output-string f-w)))))
   ((eq? op 'read-buffer) (display (list->string (reverse register))))
   ((eq? op 'copy-buffer) (if (null? f-r)
			   (display "please, run. open-input-file\n")
			   (let loop
			       ((i (read-char f-r)))
			     (when (not (eof-object? i))
			       (push i) (loop (read-char f-r))))))
   ((or (eq? op 'open-input-file) (eq? op 'er)) (display "read-file>") (if (null? f-r) #t (close-input-port f-r)) (set! f-r (open-input-file (safe-read))))
   ((or (eq? op 'open-output-file) (eq? op 'ew)) (display "write-file>") (if (null? f-w) #t (close-output-port f-w)) (set! f-w (open-output-file (safe-read))))
   ((eq? op 'open-input-buffer) (set! f-r (open-input-string buffer)))
   ((eq? op 'finish-write) (close-output-port f-w) (set! f-w '()))
   ((or (eq? op 'read-all) (eq? op 'ht)) (if (null? f-r)
			   (display "please, run. open-input-file\n")
			   (let loop
			       ((i (read-char f-r)))
			     (when (not (eof-object? i))
			       (display i) (loop (read-char f-r))))))
   ((or (eq? op 'write) (eq? op 'i)) (display "-*-write-*- (end key is Ctrl and d (C-d) (linux) or Ctrl and z (C-z) after return)\n") (read-char)
    (if (null? f-w)
	(display "please, run. open-output-file\n")
	(begin (let loop ((i (read-char))) (when (not (eof-object? i)) (write-char i f-w) (loop (read-char)))))))
   ((eof-object? op) (set! count (+ 1 count)) (if (>= count 3) (begin (set! count 0) (display "\nIf you want to exit, please type \"exit\".\n")) (display "\n")))))
(display "Hello, editor.\n")
(close-output-port (open-output-file ".tmp"))

(repl)
(newline)
(begin (if (null? f-r) #t (close f-r)) (if (null? f-w) #t (close-output-port f-w)))
(display "Bye")
