(define f-r '())
(define f-w '())
(define count 0)
(define user-input '())
(define (repl) (when (not (eq? 'exit user-input))
		 (begin (display "schet>")
			(set! user-input (read))
			(command user-input)
			(repl))))
(define (command op)
  (cond
   ((eq? op 'eval) (display "eval>") (display (eval (read) (interaction-environment))) (display "\n"))
   ((eq? op 'open-input-file) (display "read-file>") (set! f-r (open-input-file (symbol->string (read)))))
   ((eq? op 'open-output-file) (display "write-file>") (set! f-w (open-output-file (symbol->string (read)))))
   ((eq? op 'read-all) (if (nil? f-r)
			   (display "please, run. open-input-file\n")
			   (let loop
			       ((i (read-char f-r)))
			     (when (not (eof-object? i))
			       (display i) (loop (read-char f-r))))))
   ((eq? op 'write) (display "-*-write-*-\n") (read-char)
    (if (nil? f-w)
	(display "please, run. open-output-file\n")
	(let loop ((i (read-char))) (when (not (eof-object? i)) (write-char i f-w) (loop (read-char))))))
   ((eof-object? op) (set! count (+ 1 count)) (if (>= count 3) (begin (set! count 0) (display "\nIf you want to exit, please type exit.\n")) (display "\n")))))
(display "Hello, editor.\n")
(repl)
