(define f-r '())
(define f-w '())
(define bracket-mode #f)
(define depth 0)
(define user-input '())
(define count 0)
(define register '())
(define (push x) (set! register (append (list x) register)))
(define (safe-read) (let ((str (read))) (if (symbol? str) (symbol->string str) ".tmp")))
(define (repl) (if (not (eq? 'exit user-input))
		 (begin (display "schet>")
			(set! user-input (read))
			(command user-input)
			(repl)) (begin (command 'close) (display "Bye"))))
(define (command op)
  (cond
   ((eq? op 'bracket) (set! bracket-mode #t))
   ((eq? op 'help) (display "help"))
   ((eq? op 'eval) (display "eval>") (display (eval (read) (interaction-environment))) (display "\n"))
   ((eq? op 'buffer-read) (display (list->string (reverse register))))
   ((eq? op 'buffer-copy) (if (nil? f-r)
			   (display "please, run. open-input-file\n")
			   (let loop
			       ((i (read-char f-r)))
			     (when (not (eof-object? i))
			       (push i) (loop (read-char f-r))))))
   ((or (eq? op 'open-input-file) (eq? op 'er)) (display "read-file>") (set! f-r (open-input-file (safe-read))))
   ((or (eq? op 'open-output-file) (eq? op 'ew)) (display "write-file>") (set! f-w (open-output-file (safe-read))))
   ((or (eq? op 'open-add-file) (eq? op 'ea)) (display "add-file>") (set! f-w (open-file (safe-read) "a")))
   ((or (eq? op 'close) (eq? op 'ec)) (if (nil? f-r) #t (close f-r)) (if (nil? f-w) #t (close f-w)))
   ((or (eq? op 'read-all) (eq? op 'ht)) (if (nil? f-r)
			   (display "please, run. open-input-file\n")
			   (let loop
			       ((i (read-char f-r)))
			     (when (not (eof-object? i))
			       (display i) (loop (read-char f-r))))))
   ((or (eq? op 'write) (eq? op 'i)) (display "-*-write-*- (end key is Ctrl and d (C-d) (linux) or Ctrl and z (C-z) after return)\n") (read-char)
    (if (nil? f-w)
	(display "please, run. open-output-file\n")
	(begin (let loop ((i (read-char))) (when (not (eof-object? i)) (write-char i f-w) (loop (read-char)))) (close f-w))))
   ((eof-object? op) (set! count (+ 1 count)) (if (>= count 3) (begin (set! count 0) (display "\nIf you want to exit, please type exit.\n")) (display "\n")))))
(display "Hello, editor.\n")
(close (open-file ".tmp" "w"))
(repl)
(newline)
